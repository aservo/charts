apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-config
  {{- with .Values.annotations }}
  annotations:
    {{- range $key, $value := . }}
    {{- printf "%s: %s" $key (tpl $value $ | quote) | nindent 4 }}
    {{- end }}
  {{- end }}
  labels:
    {{- include "umbrella.labels" . | nindent 4 }}
    {{- range $key, $value := .Values.labels }}
    {{- printf "%s: %s" $key (tpl $value $ | quote) | nindent 4 }}
    {{- end }}
data:

  realm-config.json: |
    {{- .Values.umbrella.realmConfig | toJson | nindent 4 }}

  realm-import.sh: |-
    #!/bin/bash

    function main {

      local FILE="$1"
      local BASE_URL="$KEYCLOAK_INTERNAL_FRONTEND_URL"

      # remove trailing slash from base URL
      if [[ "${BASE_URL: -1}" == "/" ]]; then
        BASE_URL="${BASE_URL:: -1}"
      fi

      # wait until server is up
      wait_service "$BASE_URL"

      local TOKEN="$(login "$BASE_URL" "master" "$KEYCLOAK_USER" "$KEYCLOAK_PASSWORD")"
      local URL="$BASE_URL/admin/realms"

      # access check
      curl -X GET "$URL" --silent --fail -o /dev/null -H "Authorization: bearer $TOKEN"

      if [[ "$(cat "$FILE")" == "" || "$(cat "$FILE")" == "{}" ]]; then
        echo "Nothing to import."
      else

        local REALM_ID="$(cat $FILE | jq .id)"
        local FILTER=".[] | select(.id == $REALM_ID) .name"

        echo "$(basic_setup "$URL" "$TOKEN" "$FILTER" "$FILE" "realm $REALM_ID")"

      fi
    }

    function wait_service {

      local URL="$1"

      while [[ "$(curl -s -o /dev/null -I -L -w "%{http_code}" "$URL/")" != "200" ]]; do
        echo "Waiting another 5 seconds for Keycloak to come up."
        sleep 5
      done
    }

    function basic_setup {

      local URL="$1"
      local TOKEN="$2"
      local FILTER="$3"
      local FILE="$(readlink -f "$4")"
      local DESCRIPTION="$5"

      local ENTRIES="$(curl -X GET "$URL" --silent --fail -H "Authorization: bearer $TOKEN" | jq -r "$FILTER")"

      if [ -z "$ENTRIES" ];then

        echo "Create $DESCRIPTION"

        echo "$(curl -X POST "$URL" --silent --fail \
          -H "Content-Type: application/json" \
          -H "Authorization: bearer $TOKEN" \
          --data-binary "@$FILE" \
        )"

      else

        echo "Skip creation of $DESCRIPTION"

      fi
    }

    function login {

      local BASE_URL="$1"
      local REALM_NAME="$2"
      local USERNAME="$3"
      local PASSWORD="$4"

      local URL="$BASE_URL/realms/$REALM_NAME/protocol/openid-connect/token"

      echo "$(curl -X POST "$URL" --silent --fail \
        -H "Content-Type: application/x-www-form-urlencoded" \
        -d "username=$USERNAME" \
        -d "password=$PASSWORD" \
        -d "grant_type=password" \
        -d "client_id=admin-cli" | \
        jq -r ".access_token" \
      )"
    }

    set -eEo pipefail
    main "$@"
    sleep infinity # TODO: should be removed by using Kubernetes jobs or similar strategies
    exit 0
