umbrella:
  serverId: ""
  licenseKey: ""

crowd:
  volumes:
    additional:
      # -- Volume with additional configuration files
      - name: crowd-config
        configMap:
          name: crowd-config
          items:
          - key: restore-db.sh
            path: restore-db.sh
            mode: 0755
          - key: crowd.cfg.xml
            path: crowd.cfg.xml
            mode: 0755
      # -- Volume with additional encryption key
      - name: crowd-key
        configMap:
          name: crowd-config
          items:
          - key: javax.crypto.spec.SecretKeySpec
            path: javax.crypto.spec.SecretKeySpec
            mode: 0755
      # -- Volume with additional dump file for SQL import to the database
      - name: dump-config
        configMap:
          name: dump-config
          items:
          - key: db.dump
            path: db.dump

  additionalInitContainers:
    # -- Additional initContainer to copy the Crowd configuration.
    # Copies crowd.cfg.xml file to the proper location.
    # Copies Crypto key generated by the initial DB setup.
    # The key belongs to the database and must have his specific unique ending.
    # Missing this key would cause errors by Crowd server
    - name: copy-config
      image: busybox
      imagePullPolicy: IfNotPresent
      command:
        - /bin/sh
      args:
        - '-c'
        - >-
          set -x &&
          cp /tmp/crowd.cfg.xml /var/atlassian/application-data/crowd/shared/crowd.cfg.xml &&
          mkdir -p /var/atlassian/application-data/crowd/shared/keys/ &&
          cp /tmp/key/javax.crypto.spec.SecretKeySpec
          /var/atlassian/application-data/crowd/shared/keys/javax.crypto.spec.SecretKeySpec_1619611916201
      resources: {}
      volumeMounts:
        - name: crowd-config
          mountPath: /tmp/crowd.cfg.xml
          subPath: crowd.cfg.xml
        - name: shared-home
          mountPath: /var/atlassian/application-data/crowd/shared/
        - name: crowd-key
          mountPath: /tmp/key

    # -- Additional initContainer to load initial Crowd database.
    # The initial Crowd setup was performed in order to connect to a ready Postgresql database.
    # After the chart deployment a default Crowd user is able immediately to login without init routine
    - name: init-db
      image: docker.io/bitnami/postgresql:11
      imagePullPolicy: IfNotPresent
      resources: {}
      volumeMounts:
        - name: crowd-config
          mountPath: /tmp/restore-db.sh
          subPath: restore-db.sh
        - name: dump-config
          mountPath: /tmp/db.dump
          subPath: db.dump
      env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: crowd-secrets
              key: postgresql-password
      args: ['/tmp/restore-db.sh']

    # -- Until atlassian-labs/crowd:0.12.0 is released, statically deploy ConfAPI and Timestamp-to-Date
    - name: plugins
      image: ghcr.io/aservo/mapi:latest
      imagePullPolicy: Always
      resources: {}
      volumeMounts:
        - name: shared-home
          mountPath: /mnt
      command:
        - /bin/sh
      args:
        - '-c'
        - >-
          set -x &&
          echo "Start installing plugins..." &&
          mkdir -p /mnt/plugins &&
          mkdir -p /mnt/additional-plugins &&
          ./cleanup.sh /mnt/plugins jar &&
          ./download.sh de.aservo:confapi-crowd-plugin:0.0.8:jar /mnt/additional-plugins &&
          ./download.sh de.aservo:timestamp-to-date-crowd-plugin:0.0.4:jar /mnt/additional-plugins &&
          echo "Finish installing plugins..."

  crowd:
    additionalBundledPlugins:
      - volumeName: shared-home
        subDirectory: additional-plugins
        fileName: confapi-crowd-plugin.jar
      - volumeName: shared-home
        subDirectory: additional-plugins
        fileName: timestamp-to-date-crowd-plugin.jar

postgresql:
  enabled: true
  # postgresqlHostname:
  # postgresqlPort: 5432
  postgresqlDatabase: crowd
  postgresqlUsername: crowd
  postgresqlPassword: crowd
  postgresqlPostgresPassword: crowd
